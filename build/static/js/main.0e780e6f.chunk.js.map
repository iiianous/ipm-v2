{"version":3,"sources":["assets/images/spinner.svg","elements/Loader.js","App.js","serviceWorker.js","index.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","_ref2","react_default","a","createElement","cx","cy","r","strokeWidth","stroke","strokeDasharray","fill","strokeLinecap","transform","attributeName","type","repeatCount","dur","keyTimes","values","spinner_SvgSpinner","_ref","svgRef","props","style","margin","background","display","shapeRendering","width","height","viewBox","preserveAspectRatio","ref","ForwardRef","forwardRef","__webpack_require__","p","Wrapper","styled","_templateObject","Loader","SectionHero","lazy","e","then","bind","SectionWork","SectionAbout","SectionFooter","App","_useState","useState","_useState2","slicedToArray","calculate","setCalculate","useEffect","onScrollHandle","window","addEventListener","calc","scrollY","overflow","react","fallback","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0e780e6f.chunk.js","sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 =\n/*#__PURE__*/\nReact.createElement(\"circle\", {\n  cx: 50,\n  cy: 50,\n  r: 32,\n  strokeWidth: 8,\n  stroke: \"#f3dc1d\",\n  strokeDasharray: \"50.26548245743669 50.26548245743669\",\n  fill: \"none\",\n  strokeLinecap: \"round\",\n  transform: \"rotate(75.0146 50 50)\"\n}, React.createElement(\"animateTransform\", {\n  attributeName: \"transform\",\n  type: \"rotate\",\n  repeatCount: \"indefinite\",\n  dur: \"1s\",\n  keyTimes: \"0;1\",\n  values: \"0 50 50;360 50 50\"\n}));\n\nvar SvgSpinner = function SvgSpinner(_ref) {\n  var svgRef = _ref.svgRef,\n      props = _objectWithoutProperties(_ref, [\"svgRef\"]);\n\n  return React.createElement(\"svg\", _extends({\n    style: {\n      margin: \"auto\",\n      background: \"rgb(255, 255, 255)\",\n      display: \"block\",\n      shapeRendering: \"auto\"\n    },\n    width: \"200px\",\n    height: \"200px\",\n    viewBox: \"0 0 100 100\",\n    preserveAspectRatio: \"xMidYMid\",\n    ref: svgRef\n  }, props), _ref2);\n};\n\nvar ForwardRef = React.forwardRef(function (props, ref) {\n  return React.createElement(SvgSpinner, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/spinner.1cf9db59.svg\";\nexport { ForwardRef as ReactComponent };","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { ReactComponent as IconSpinner } from \"assets/images/spinner.svg\";\n\nconst Wrapper = styled(\"div\")`\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: center;\n\theight: 100vh;\n`;\n\nconst Loader = () => {\n\treturn (\n\t\t<Wrapper>\n\t\t\t<IconSpinner width=\"60\" />\n\t\t</Wrapper>\n\t);\n};\n\nexport default Loader;\n","import React, { useState, useEffect, lazy, Suspense } from \"react\";\nimport Loader from \"./elements/Loader\";\n\nconst SectionHero = lazy(() => import(\"components/SectionHero\"));\nconst SectionWork = lazy(() => import(\"components/SectionWork\"));\nconst SectionAbout = lazy(() => import(\"components/SectionAbout\"));\nconst SectionFooter = lazy(() => import(\"components/SectionFooter\"));\n\nfunction App() {\n\tconst [calculate, setCalculate] = useState(0);\n\n\tuseEffect(() => {\n\t\tonScrollHandle();\n\t}, []);\n\n\tconst onScrollHandle = () => {\n\t\twindow.addEventListener(\"scroll\", () => {\n\t\t\tlet calc;\n\n\t\t\tif (window.scrollY < 600) calc = window.scrollY / 10.2 + `%`;\n\n\t\t\tsetCalculate(calc);\n\t\t});\n\t};\n\n\tlet overflow = {\n\t\toverflow: \"hidden\",\n\t};\n\n\treturn (\n\t\t<div style={overflow}>\n\t\t\t<Suspense fallback={Loader()}>\n\t\t\t\t<SectionHero calculate={calculate} />\n\t\t\t\t<SectionAbout />\n\t\t\t\t<SectionWork />\n\t\t\t\t<SectionFooter />\n\t\t\t</Suspense>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './Styles.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}