{"version":3,"sources":["elements/Loader.js","App.js","serviceWorker.js","index.js"],"names":["spinThat","keyframes","_templateObject","Wrapper","styled","_templateObject2","Loader","react_default","a","createElement","className","SectionHero","lazy","__webpack_require__","e","then","bind","SectionWork","SectionAbout","SectionFooter","App","_useState","useState","_useState2","Object","slicedToArray","calculate","setCalculate","useEffect","onScrollHandle","window","addEventListener","calc","scrollY","style","overflow","react","fallback","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"s6DAGA,IAAMA,EAAWC,YAAHC,KAKRC,EAAUC,YAAO,MAAPA,CAAHC,IAmBEL,GA6DAM,EAfA,WACd,OACCC,EAAAC,EAAAC,cAACN,EAAD,KACCI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0CACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACdH,EAAAC,EAAAC,cAAA,YACAF,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,iBC7EAE,EAAcC,eAAK,kBAAMC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,YACzBC,EAAcL,eAAK,kBAAMC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,YACzBE,EAAeN,eAAK,kBAAMC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,YAC1BG,EAAgBP,eAAK,kBAAMC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,YAmClBI,MAjCf,WAAe,IAAAC,EACoBC,mBAAS,GAD7BC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACPK,EADOH,EAAA,GACII,EADJJ,EAAA,GAGdK,oBAAU,WACTC,KACE,IAEH,IAAMA,EAAiB,WACtBC,OAAOC,iBAAiB,SAAU,WACjC,IAAIC,EAEAF,OAAOG,QAAU,MAAKD,EAAOF,OAAOG,QAAU,KAAjB,KAEjCN,EAAaK,MAQf,OACCzB,EAAAC,EAAAC,cAAA,OAAKyB,MALS,CACdC,SAAU,WAKT5B,EAAAC,EAAAC,cAAC2B,EAAA,SAAD,CAAUC,SAAU/B,KACnBC,EAAAC,EAAAC,cAACE,EAAD,CAAae,UAAWA,IACxBnB,EAAAC,EAAAC,cAACS,EAAD,MACAX,EAAAC,EAAAC,cAACQ,EAAD,MACAV,EAAAC,EAAAC,cAACU,EAAD,eCvBgBmB,QACW,cAA7BR,OAAOS,SAASC,UAEe,UAA7BV,OAAOS,SAASC,UAEhBV,OAAOS,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpC,EAAAC,EAAAC,cAACmC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlC,KAAK,SAAAmC,GACjCA,EAAaC","file":"static/js/main.2c256a54.chunk.js","sourcesContent":["import React from \"react\";\nimport styled, { keyframes } from \"styled-components\";\n\nconst spinThat = keyframes`\n  0% { transform: rotate(0) }\n  100% { transform: rotate(360deg)\n`;\n\nconst Wrapper = styled(\"div\")`\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: center;\n\theight: 100vh;\n\ttransform: scale(0.3);\n\n\t.ldio-apsiublcxuf div {\n\t\tbox-sizing: border-box !important;\n\t}\n\t.ldio-apsiublcxuf > div {\n\t\tposition: absolute;\n\t\twidth: 144px;\n\t\theight: 144px;\n\t\ttop: 28px;\n\t\tleft: 28px;\n\t\tborder-radius: 50%;\n\t\tborder: 16px solid #000;\n\t\tborder-color: #f3dc1d transparent #f3dc1d transparent;\n\t\tanimation: ${spinThat} 1s linear infinite;\n\t}\n\t.ldio-apsiublcxuf > div:nth-child(2) {\n\t\tborder-color: transparent;\n\t}\n\t.ldio-apsiublcxuf > div:nth-child(2) div {\n\t\tposition: absolute;\n\t\twidth: 100%;\n\t\theight: 100%;\n\t\ttransform: rotate(45deg);\n\t}\n\t.ldio-apsiublcxuf > div:nth-child(2) div:before,\n\t.ldio-apsiublcxuf > div:nth-child(2) div:after {\n\t\tcontent: \"\";\n\t\tdisplay: block;\n\t\tposition: absolute;\n\t\twidth: 16px;\n\t\theight: 16px;\n\t\ttop: -16px;\n\t\tleft: 48px;\n\t\tbackground: #f3dc1d;\n\t\tborder-radius: 50%;\n\t\tbox-shadow: 0 128px 0 0 #f3dc1d;\n\t}\n\t.ldio-apsiublcxuf > div:nth-child(2) div:after {\n\t\tleft: -16px;\n\t\ttop: 48px;\n\t\tbox-shadow: 128px 0 0 0 #f3dc1d;\n\t}\n\t.loadingio-spinner-dual-ring-fxhsbudfhvp {\n\t\twidth: 200px;\n\t\theight: 200px;\n\t\tdisplay: inline-block;\n\t\toverflow: hidden;\n\t\tbackground: #ffffff;\n\t}\n\t.ldio-apsiublcxuf {\n\t\twidth: 100%;\n\t\theight: 100%;\n\t\tposition: relative;\n\t\ttransform: translateZ(0) scale(1);\n\t\tbackface-visibility: hidden;\n\t\ttransform-origin: 0 0; /* see note above */\n\t}\n`;\n\nconst Loader = () => {\n\treturn (\n\t\t<Wrapper>\n\t\t\t<div className=\"loadingio-spinner-dual-ring-svvy2b2xl9\">\n\t\t\t\t<div className=\"ldio-apsiublcxuf\">\n\t\t\t\t\t<div></div>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<div></div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</Wrapper>\n\t);\n};\n\nexport default Loader;\n","import React, { useState, useEffect, lazy, Suspense } from \"react\";\nimport Loader from \"./elements/Loader\";\n\nconst SectionHero = lazy(() => import(\"components/SectionHero\"));\nconst SectionWork = lazy(() => import(\"components/SectionWork\"));\nconst SectionAbout = lazy(() => import(\"components/SectionAbout\"));\nconst SectionFooter = lazy(() => import(\"components/SectionFooter\"));\n\nfunction App() {\n\tconst [calculate, setCalculate] = useState(0);\n\n\tuseEffect(() => {\n\t\tonScrollHandle();\n\t}, []);\n\n\tconst onScrollHandle = () => {\n\t\twindow.addEventListener(\"scroll\", () => {\n\t\t\tlet calc;\n\n\t\t\tif (window.scrollY < 600) calc = window.scrollY / 10.2 + `%`;\n\n\t\t\tsetCalculate(calc);\n\t\t});\n\t};\n\n\tlet overflow = {\n\t\toverflow: \"hidden\",\n\t};\n\n\treturn (\n\t\t<div style={overflow}>\n\t\t\t<Suspense fallback={Loader()}>\n\t\t\t\t<SectionHero calculate={calculate} />\n\t\t\t\t<SectionAbout />\n\t\t\t\t<SectionWork />\n\t\t\t\t<SectionFooter />\n\t\t\t</Suspense>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './Styles.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}